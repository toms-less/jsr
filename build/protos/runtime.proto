syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.toms.less.server";
option java_outer_classname = "RuntimeProto";
option go_package = "build/protos/runtime";
package protos;

service RuntimeService {
    rpc Route (RuntimeRequest) returns (RuntimeResponse);
}

message RuntimeRequest {
    /**
     * Request type.
     */
    Common.Type type = 1;

    /**
     * Request ID.
     */
    string id = 2;

    /**
     * Data of function calling.
     */
    CallRequest call = 3;

    /**
     * Data of function script updating.
     */
    repeated ScriptRequest script = 4;
}

message CallRequest {
    /**
     * Function name.
     */
    string function = 1;

    /**
     * Function version.
     */
    string version = 2;

    /**
     * Function group.
     */
    string group = 3;

    /**
     * Function unit.
     */
    string unit = 4;

    /**
     * Timeout value of client specified to tell runtime the function calling timeout.
     */
    int64 timeout = 5;

    /**
     * HTTP requesting method.
     */
    string method = 6;

    /**
     * HTTP requesting headers.
     */
    map<string,string> headers = 7;

    /**
     * HTTP requesting parameters.
     */
    map<string,string> parameters = 8;

    /**
     * HTTP requesting data.
     */
    string data = 9;
}

message ScriptRequest {
    /**
     * Function name.
     */
    string function = 1;

    /**
     * Function version.
     */
    string version = 2;

    /**
     * Function group.
     */
    string group = 3;

    /**
     * Function unit.
     */
    string unit = 4;

    /**
     * Function script for updating.
     */
    string script = 5;
}

message RuntimeResponse {
    /**
     * Response type.
     */
    Common.Type type = 1;

    /**
     * Response status.
     */
    Common.Status status = 2;

    /**
     * Detail description of 'Common.Status'.
     */
     string message = 3;

    /**
     * Response ID.
     * Responsing ID is same as requesting ID.
     */
    string id = 4;

    /**
     * Data of function responsing.
     */
    CallResponse call = 5;
    
    /**
     * Data of script responsing.
     */
    ScriptResponse script = 6;
}

message CallResponse {
    /**
     * Function name.
     */
    string function = 1;

    /**
     * Function version.
     */
    string version = 2;

    /**
     * Function group.
     */
    string group = 3;

    /**
     * Function unit.
     */
    string unit = 4;

    /**
     * Runtime type of current runtime.
     */
    string runtime = 5;

    /**
     * HTTP responsing headers.
     */
    map<string,string> headers = 6;

    /**
     * HTTP responsing data.
     */
    string data = 7;
}

message ScriptResponse {
    /**
     * Function name.
     */
    string function = 1;

    /**
     * Function version.
     */
    string version = 2;
 
    /**
     * Function group.
     */ 
    string group = 3;
 
    /**
     * Function unit.
     */
    string unit = 4;
 
    /**
     * Runtime type of current runtime.
     */
    string runtime = 5;
}

message Common {
    /**
     * Request or response type, default is 'UNKNOWN' if not be specified.
     * 1. 'CALL' means function calling.
     * 2. 'SCRIPT' means function script updating.
     */
    enum Type {
        UNKNOWN = 0;
        CALL = 1;
        SCRIPT =2;
    }

    /**
     * Request or response status, default is 'OK' if not be specified. 
     * 1. 'INIT' means the requesting or responsing has been initialized.
     * 2. 'OK' means function calling or script updating is OK.
     * 3. 'TIMEOUT' means function calling or script updating is timeout.
     * 4. 'INVALID_TYPE' means requesting type from client is invalid.
     * 5. 'SYSTEM_ERROR' means function calling or script updating has happened some system errors.
     * 6. 'USER_ERROR' means function calling or script updating has happened some user errors.
     */
    enum Status {
        INIT = 0;
        OK = 1;
        TIMEOUT = 2;
        SYSTEM_ERROR = 3;
        USER_ERROR = 4;
    }
}